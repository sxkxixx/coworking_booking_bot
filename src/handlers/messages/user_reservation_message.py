import logging
from typing import Optional

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from common.utils import extract_time_from_dt
from infrastructure.database import User, Reservation, PlaceType
from infrastructure.settings import InfrastructureSettings
from storage.reservation_repository import AbstractReservationRepository
from storage.user_repository import AbstractUserRepository
from .abstract_message_handler import AbstractMessageHandler
from ..mixins import HelpMenuMixin

logger = logging.getLogger(__name__)


class UserReservationMessage(AbstractMessageHandler, HelpMenuMixin):
    FILTERS = [Command("upcoming")]

    UNAUTHORIZED_MESSAGE: str = (
        """–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ"""
    )

    RESERVATION_PATTERN: str = (
        """–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!üî•\n"""
        """–ö–æ–≤–æ—Ä–∫–∏–Ω–≥: {coworking_name} üè¢\n"""
        """–ê–¥—Ä–µ—Å: {address}\n"""
        """–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {session_start} - {session_end}\n"""
        """–¢–∏–ø –º–µ—Å—Ç–∞: {place_type}"""
    )

    NO_INCOMING_BOOKING_MESSAGE: str = (
        """–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üö´\n"""
        """–í —Å–µ—Ä–≤–∏—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ """
        """–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è"""
    )

    def __init__(
            self,
            user_repository: AbstractUserRepository,
            reservation_repository: AbstractReservationRepository,
            infra_settings: InfrastructureSettings
    ):
        self.user_repository = user_repository
        self.reservation_repository = reservation_repository
        self.infra_settings = infra_settings

    async def process_message(self, message: Message, state: FSMContext) -> None:
        user: Optional[User] = await self.user_repository.get_user_by_chat_id(message.chat.id)
        if not user:
            await message.answer(self.UNAUTHORIZED_MESSAGE)
            return
        booking: Optional[Reservation] = (
            await self.reservation_repository.get_income_reservation(user)
        )
        if not booking:
            logger.info(f"User(email={user.email}) has no incoming reservation")
            await message.answer(self.NO_INCOMING_BOOKING_MESSAGE)
            return
        await message.answer(
            self.RESERVATION_PATTERN.format(
                coworking_name=booking.seat.coworking.title,
                address=booking.seat.coworking.address,
                session_start=extract_time_from_dt(booking.session_start),
                session_end=extract_time_from_dt(booking.session_end),
                place_type=self.__place_type_ru(booking.seat.place_type),
            ),
        )

    @staticmethod
    def __place_type_ru(place_type: str) -> str:
        return {
            PlaceType.MEETING_ROOM.value: "–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞",
            PlaceType.TABLE.value: "–°—Ç–æ–ª"
        }[place_type]

    @property
    def command(self) -> str:
        return "/upcoming"

    @property
    def description(self) -> str:
        return "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
