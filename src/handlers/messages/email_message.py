import logging
import re
from typing import Optional

from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from common.message_executors.password_msg_executor import PasswordMessageExecutor
from common.states import AuthState
from infrastructure.database import User, EmailAuthData
from infrastructure.settings import InfrastructureSettings
from storage.email_auth_repository.abstract_email_auth_repository import AbstractEmailAuthRepository
from storage.user_repository import AbstractUserRepository
from .abstract_message_handler import AbstractMessageHandler

logger = logging.getLogger(__name__)


class EmailMessage(AbstractMessageHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    FILTERS = [AuthState.email]

    email_regex = re.compile(r'^[A-Za-z0-9]+[.-_]*[A-Za-z0-9]+@(?:urfu.me|urfu.ru)$')

    INVALID_EMAIL_MESSAGE: str = (
        """–û–π... –í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—É—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É...\n"""
        """–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ–º–µ–Ω <b>urfu.me</b> / <b>urfu.ru</b>\n"""
        """–ù–∞–ø—Ä–∏–º–µ—Ä, name.surname@urfu.ru\n"""
        """–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –≤–∞–ª–∏–¥–Ω–æ–π –ø–æ—á—Ç–æ–π"""
    )

    USER_NOT_FOUND_MESSAGE: str = (
        """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –í–∞—Å –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é.\n"""
        """–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–µ—Ä–≤–∏—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è """
        """–∫–æ–≤–æ—Ä–∫–∏–Ω–≥–æ–≤ –£—Ä–§–£, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∞–¥—Ä–µ—Å—É {tech_support}. """
        """–ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º """
        """<a href='{frontend_url}'>—Å–µ—Ä–≤–∏—Å–µ</a>"""
    )

    PASSWORD_SENT_MESSAGE = (
        """–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –í–∞–º–∏ –ø–æ—á—Ç—É (%s) –≤—ã—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.üë®‚Äçüíª\n"""
        """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –Ω–∞—à–µ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É"""
    )

    def __init__(
            self,
            user_repository: AbstractUserRepository,
            email_auth_repository: AbstractEmailAuthRepository,
            email_executor: PasswordMessageExecutor,
            infrastructure_settings: InfrastructureSettings,
    ):
        self.user_repository = user_repository
        self.email_auth_repository = email_auth_repository
        self.email_executor = email_executor
        self.infrastructure_settings = infrastructure_settings

    async def process_message(self, message: Message, state: FSMContext) -> None:
        email: str = message.text
        if self.email_regex.match(email) is None:
            logger.error(f"Email = {email} not match pattern")
            await message.answer(self.INVALID_EMAIL_MESSAGE, parse_mode='html')
            return
        user: Optional[User] = await self.user_repository.get_user_by_email(email)
        if not user:
            logger.error(f"User with email={email} not found")
            await message.answer(
                self.USER_NOT_FOUND_MESSAGE.format(
                    tech_support=self.infrastructure_settings.TECHNICAL_SUPPORT_EMAIL,
                    frontend_url=self.infrastructure_settings.FRONTEND_HOST,
                ),
                parse_mode='html'
            )
            return
        auth_data: EmailAuthData = await self.email_auth_repository.create(user, message.chat.id)
        await self.email_executor.execute(receiver=user.email, password=auth_data.password)
        logger.info(f"Password is sent to user email={user.email}")
        await state.set_state(AuthState.one_time_password)
        await message.answer(self.PASSWORD_SENT_MESSAGE % email)
